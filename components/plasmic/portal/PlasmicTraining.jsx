// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: axW1Q7tQMGoC9jdxnXE57v
// Component: 40WiM-XXXPvw
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import {
  PlasmicPageGuard as PlasmicPageGuard__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  initializeCodeComponentStates,
  initializePlasmicStates,
  set as $stateSet,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv
} from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";
import PageLayout from "../../PageLayout"; // plasmic-import: CZ9Ckf2FOzzF/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { ConditionGuard } from "@plasmicpkgs/plasmic-basic-components";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { UploadWrapper } from "@plasmicpkgs/antd5/skinny/registerUpload";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { useScreenVariants as useScreenVariantsk21KBn6Vb9Ed } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: K21kBN6Vb9ed/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: axW1Q7tQMGoC9jdxnXE57v/projectcss
import sty from "./PlasmicTraining.module.css"; // plasmic-import: 40WiM-XXXPvw/css

createPlasmicElementProxy;

export const PlasmicTraining__VariantProps = new Array();

export const PlasmicTraining__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTraining__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  let [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,
        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "input5[].value",
        type: "private",
        variableType: "text",
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input6[].value",
        type: "private",
        variableType: "text",
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "select[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "upload[].files",
        type: "private",
        variableType: "array"
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();
  const new$Queries = {
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "kg27Khthh5W85SBD6wGA9T",
        opId: "7bef9a74-fb4c-4432-bcd5-1e6c957a86f2",
        userArgs: {},
        cacheKey: `plasmic.$.7bef9a74-fb4c-4432-bcd5-1e6c957a86f2.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    dpDataFromDirectus: usePlasmicDataOp(() => {
      return {
        sourceId: "4ZYYADAQoesjszGqnyuasC",
        opId: "76e49c8b-299a-4612-ab6c-0c908ec4f3bb",
        userArgs: {},
        cacheKey: `plasmic.$.76e49c8b-299a-4612-ab6c-0c908ec4f3bb.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsk21KBn6Vb9Ed()
  });
  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicTraining.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicTraining.pageMetadata.title}
        />

        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicTraining.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <PageLayout
            data-plasmic-name={"pageLayout"}
            data-plasmic-override={overrides.pageLayout}
            className={classNames("__wab_instance", sty.pageLayout)}
          >
            <DataCtxReader__>
              {$ctx => (
                <React.Fragment>
                  <section
                    data-plasmic-name={"section"}
                    data-plasmic-override={overrides.section}
                    className={classNames(projectcss.all, sty.section)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"freeBox"}
                      data-plasmic-override={overrides.freeBox}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox)}
                    />
                  </section>
                  <h1
                    data-plasmic-name={"h1"}
                    data-plasmic-override={overrides.h1}
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1
                    )}
                  >
                    {"Training"}
                  </h1>
                  {(() => {
                    const child$Props = {
                      className: classNames("__wab_instance", sty.form),
                      extendedOnValuesChange:
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["form", "value"],
                          FormWrapper_Helpers
                        ),
                      formItems: [
                        { label: "Name", name: "name", inputType: "Text" },
                        {
                          label: "Message",
                          name: "message",
                          inputType: "Text Area"
                        }
                      ],

                      labelCol: { span: 8, horizontalOnly: true },
                      layout: "vertical",
                      mode: "advanced",
                      onFinish: async values => {
                        const $steps = {};
                        $steps["httpPost"] = true
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "4ZYYADAQoesjszGqnyuasC",
                                  opId: "eed4624f-32ec-4bc5-bc75-faac8ccf6616",
                                  userArgs: {
                                    body: [
                                      Object.keys($state.form.value).reduce(
                                        (obj, key) => {
                                          if (
                                            !Array.isArray(
                                              $state.form.value[key]
                                            )
                                          ) {
                                            obj[key] = $state.form.value[key];
                                          } else {
                                            obj[key] =
                                              $state.form.value[
                                                key
                                              ][0].contents;
                                          }
                                          return obj;
                                        },
                                        {}
                                      )
                                    ]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: ["plasmic_refresh_all"],
                                  roleId: null
                                }
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["httpPost"] != null &&
                          typeof $steps["httpPost"] === "object" &&
                          typeof $steps["httpPost"].then === "function"
                        ) {
                          $steps["httpPost"] = await $steps["httpPost"];
                        }
                        $steps["httpPost2"] = true
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "4ZYYADAQoesjszGqnyuasC",
                                  opId: "3f4b05fd-5900-4f40-9fb1-9268cfef82b6",
                                  userArgs: {},
                                  cacheKey: null,
                                  invalidatedKeys: ["plasmic_refresh_all"],
                                  roleId: null
                                }
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["httpPost2"] != null &&
                          typeof $steps["httpPost2"] === "object" &&
                          typeof $steps["httpPost2"].then === "function"
                        ) {
                          $steps["httpPost2"] = await $steps["httpPost2"];
                        }
                      },
                      onFinishFailed: async data => {
                        const $steps = {};
                      },
                      onIsSubmittingChange:
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "isSubmitting",
                          ["form", "isSubmitting"],
                          FormWrapper_Helpers
                        ),
                      ref: ref => {
                        $refs["form"] = ref;
                      },
                      submitSlot: null,
                      wrapperCol: { span: 16, horizontalOnly: true }
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "form.value"
                        },
                        {
                          name: "isSubmitting",
                          plasmicStateName: "form.isSubmitting"
                        }
                      ],

                      [],
                      FormWrapper_Helpers ?? {},
                      child$Props
                    );
                    return (
                      <FormWrapper
                        data-plasmic-name={"form"}
                        data-plasmic-override={overrides.form}
                        {...child$Props}
                      >
                        {(_par =>
                          !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                          (() => {
                            try {
                              return $queries.dpDataFromDirectus.data.response.data.fields.filter(
                                field =>
                                  field.collection === "Digital_plans" &&
                                  field.meta.hidden === false
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        ).map((__plasmic_item_0, __plasmic_idx_0) => {
                          const currentItem = __plasmic_item_0;
                          const currentIndex = __plasmic_idx_0;
                          return (
                            <ConditionGuard
                              className={classNames(
                                "__wab_instance",
                                sty.conditionGuard___5Mj78
                              )}
                              condition={(() => {
                                try {
                                  return (
                                    currentItem.meta["interface"] ===
                                    "select-dropdown"
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })()}
                              key={currentIndex}
                            >
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField___52YkU
                                )}
                                label={
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.field
                                          .replace(/_/g, " ")
                                          .toLowerCase()
                                          .replace(/^\w/, c => c.toUpperCase());
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Name";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                }
                                name={(() => {
                                  try {
                                    return currentItem.field;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              >
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.select
                                    ),
                                    defaultStylesClassName: classNames(
                                      projectcss.root_reset,
                                      projectcss.plasmic_default_styles,
                                      projectcss.plasmic_mixins,
                                      projectcss.plasmic_tokens,
                                      plasmic_antd_5_hostless_css.plasmic_tokens,
                                      plasmic_plasmic_rich_components_css.plasmic_tokens
                                    ),
                                    onChange: generateStateOnChangeProp(
                                      $state,
                                      ["select", __plasmic_idx_0, "value"]
                                    ),
                                    options: (() => {
                                      try {
                                        return currentItem.meta.options.choices;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [
                                            {
                                              value: "option1",
                                              label: "Option 1",
                                              type: "option"
                                            },
                                            {
                                              value: "option2",
                                              label: "Option 2",
                                              type: "option"
                                            }
                                          ];
                                        }
                                        throw e;
                                      }
                                    })(),
                                    placeholder: "Select...",
                                    popupScopeClassName: sty["select__popup"],
                                    value: generateStateValueProp($state, [
                                      "select",
                                      __plasmic_idx_0,
                                      "value"
                                    ])
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "value",
                                        plasmicStateName: "select[].value"
                                      }
                                    ],

                                    [__plasmic_idx_0],
                                    undefined ?? {},
                                    child$Props
                                  );
                                  initializePlasmicStates(
                                    $state,
                                    [
                                      {
                                        name: "select[].value",
                                        initFunc: ({
                                          $props,
                                          $state,
                                          $queries
                                        }) => undefined
                                      }
                                    ],

                                    [__plasmic_idx_0]
                                  );
                                  return (
                                    <AntdSelect
                                      data-plasmic-name={"select"}
                                      data-plasmic-override={overrides.select}
                                      {...child$Props}
                                    />
                                  );
                                })()}
                              </FormItemWrapper>
                            </ConditionGuard>
                          );
                        })}
                        {(_par =>
                          !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                          (() => {
                            try {
                              return $queries.dpDataFromDirectus.data.response.data.fields.filter(
                                field =>
                                  field.collection === "Digital_plans" &&
                                  field.meta.hidden === false
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        ).map((__plasmic_item_0, __plasmic_idx_0) => {
                          const currentItem = __plasmic_item_0;
                          const currentIndex = __plasmic_idx_0;
                          return (
                            <ConditionGuard
                              className={classNames(
                                "__wab_instance",
                                sty.conditionGuard__d0Tl
                              )}
                              condition={(() => {
                                try {
                                  return currentItem.type === "integer";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })()}
                              key={currentIndex}
                            >
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField__rus6
                                )}
                                label={
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return (
                                          currentItem.field
                                            .replace(/_/g, " ")
                                            .charAt(0)
                                            .toUpperCase() +
                                          currentItem.field
                                            .replace(/_/g, " ")
                                            .slice(1)
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Name";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                }
                                name={(() => {
                                  try {
                                    return currentItem.field;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              >
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.input5
                                    ),
                                    onChange:
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "value",
                                        ["input5", __plasmic_idx_0, "value"],
                                        AntdInput_Helpers
                                      ),
                                    type: "number",
                                    value: generateStateValueProp($state, [
                                      "input5",
                                      __plasmic_idx_0,
                                      "value"
                                    ])
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "value",
                                        plasmicStateName: "input5[].value"
                                      }
                                    ],

                                    [__plasmic_idx_0],
                                    AntdInput_Helpers ?? {},
                                    child$Props
                                  );
                                  initializePlasmicStates(
                                    $state,
                                    [
                                      {
                                        name: "input5[].value",
                                        initFunc: ({
                                          $props,
                                          $state,
                                          $queries
                                        }) => undefined
                                      }
                                    ],

                                    [__plasmic_idx_0]
                                  );
                                  return (
                                    <AntdInput
                                      data-plasmic-name={"input5"}
                                      data-plasmic-override={overrides.input5}
                                      {...child$Props}
                                    />
                                  );
                                })()}
                              </FormItemWrapper>
                            </ConditionGuard>
                          );
                        })}
                        {(_par =>
                          !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                          (() => {
                            try {
                              return $queries.dpDataFromDirectus.data.response.data.fields.filter(
                                field =>
                                  field.collection === "Digital_plans" &&
                                  field.meta.hidden === false
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        ).map((__plasmic_item_0, __plasmic_idx_0) => {
                          const currentItem = __plasmic_item_0;
                          const currentIndex = __plasmic_idx_0;
                          return (
                            <ConditionGuard
                              className={classNames(
                                "__wab_instance",
                                sty.conditionGuard__qnAR
                              )}
                              condition={(() => {
                                try {
                                  return (
                                    currentItem.type === "string" &&
                                    currentItem.meta.interface === "input"
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })()}
                              key={currentIndex}
                            >
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField__bm91Y
                                )}
                                label={
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return (
                                          currentItem.field
                                            .replace(/_/g, " ")
                                            .charAt(0)
                                            .toUpperCase() +
                                          currentItem.field
                                            .replace(/_/g, " ")
                                            .slice(1)
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Name";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                }
                                name={(() => {
                                  try {
                                    return currentItem.field;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              >
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.input6
                                    ),
                                    onChange:
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "value",
                                        ["input6", __plasmic_idx_0, "value"],
                                        AntdInput_Helpers
                                      ),
                                    type: "text",
                                    value: generateStateValueProp($state, [
                                      "input6",
                                      __plasmic_idx_0,
                                      "value"
                                    ])
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "value",
                                        plasmicStateName: "input6[].value"
                                      }
                                    ],

                                    [__plasmic_idx_0],
                                    AntdInput_Helpers ?? {},
                                    child$Props
                                  );
                                  initializePlasmicStates(
                                    $state,
                                    [
                                      {
                                        name: "input6[].value",
                                        initFunc: ({
                                          $props,
                                          $state,
                                          $queries
                                        }) => undefined
                                      }
                                    ],

                                    [__plasmic_idx_0]
                                  );
                                  return (
                                    <AntdInput
                                      data-plasmic-name={"input6"}
                                      data-plasmic-override={overrides.input6}
                                      {...child$Props}
                                    />
                                  );
                                })()}
                              </FormItemWrapper>
                            </ConditionGuard>
                          );
                        })}
                        {(_par =>
                          !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                          (() => {
                            try {
                              return $queries.dpDataFromDirectus.data.response.data.fields.filter(
                                obj =>
                                  obj.collection === "Digital_plans" &&
                                  obj.meta.hidden === false
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        ).map((__plasmic_item_0, __plasmic_idx_0) => {
                          const currentItem = __plasmic_item_0;
                          const currentIndex = __plasmic_idx_0;
                          return (
                            <ConditionGuard
                              className={classNames(
                                "__wab_instance",
                                sty.conditionGuard__mZaJr
                              )}
                              condition={(() => {
                                try {
                                  return currentItem.meta.interface === "file";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })()}
                              key={currentIndex}
                            >
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField__c1Ptl
                                )}
                                label={
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return (
                                          currentItem.field
                                            .replace(/_/g, " ")
                                            .charAt(0)
                                            .toUpperCase() +
                                          currentItem.field
                                            .replace(/_/g, " ")
                                            .slice(1)
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Name";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                }
                                name={(() => {
                                  try {
                                    return currentItem.field;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                                preserve={false}
                              >
                                {(() => {
                                  const child$Props = {
                                    accept: "",
                                    className: classNames(
                                      "__wab_instance",
                                      sty.upload
                                    ),
                                    dragAndDropFiles: false,
                                    files: generateStateValueProp($state, [
                                      "upload",
                                      __plasmic_idx_0,
                                      "files"
                                    ]),
                                    listType: "text",
                                    maxCount: 1,
                                    multiple: false,
                                    onFilesChange: async (...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "upload",
                                        __plasmic_idx_0,
                                        "files"
                                      ]).apply(null, eventArgs);
                                      (async files => {
                                        const $steps = {};
                                        $steps["updateInput5Value"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: [
                                                    "input5[]",
                                                    "value"
                                                  ]
                                                },
                                                operation: 0
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;
                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateInput5Value"] != null &&
                                          typeof $steps["updateInput5Value"] ===
                                            "object" &&
                                          typeof $steps["updateInput5Value"]
                                            .then === "function"
                                        ) {
                                          $steps["updateInput5Value"] =
                                            await $steps["updateInput5Value"];
                                        }
                                      }).apply(null, eventArgs);
                                    },
                                    showUploadList: true
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "files",
                                        plasmicStateName: "upload[].files"
                                      }
                                    ],

                                    [__plasmic_idx_0],
                                    undefined ?? {},
                                    child$Props
                                  );
                                  initializePlasmicStates(
                                    $state,
                                    [
                                      {
                                        name: "upload[].files",
                                        initFunc: ({
                                          $props,
                                          $state,
                                          $queries
                                        }) => []
                                      }
                                    ],

                                    [__plasmic_idx_0]
                                  );
                                  return (
                                    <UploadWrapper
                                      data-plasmic-name={"upload"}
                                      data-plasmic-override={overrides.upload}
                                      {...child$Props}
                                    >
                                      <AntdButton
                                        className={classNames(
                                          "__wab_instance",
                                          sty.button__r3CEx
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text___3WcIr
                                          )}
                                        >
                                          {"Upload"}
                                        </div>
                                      </AntdButton>
                                    </UploadWrapper>
                                  );
                                })()}
                              </FormItemWrapper>
                            </ConditionGuard>
                          );
                        })}
                        <AntdButton
                          className={classNames(
                            "__wab_instance",
                            sty.button__hLwqn
                          )}
                          onClick={async () => {
                            const $steps = {};
                          }}
                          submitsForm={true}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___4Mwy
                            )}
                          >
                            {"Get Certified"}
                          </div>
                        </AntdButton>
                      </FormWrapper>
                    );
                  })()}
                </React.Fragment>
              )}
            </DataCtxReader__>
          </PageLayout>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "pageLayout",
    "section",
    "freeBox",
    "h1",
    "form",
    "select",
    "input5",
    "input6",
    "upload"
  ],

  pageLayout: [
    "pageLayout",
    "section",
    "freeBox",
    "h1",
    "form",
    "select",
    "input5",
    "input6",
    "upload"
  ],

  section: ["section", "freeBox"],
  freeBox: ["freeBox"],
  h1: ["h1"],
  form: ["form", "select", "input5", "input6", "upload"],
  select: ["select"],
  input5: ["input5"],
  input6: ["input6"],
  upload: ["upload"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTraining__ArgProps,
          internalVariantPropNames: PlasmicTraining__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTraining__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTraining";
  } else {
    func.displayName = `PlasmicTraining.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard(WrappedComponent) {
  const PageGuard = props => (
    <PlasmicPageGuard__
      minRole={null}
      appId={"axW1Q7tQMGoC9jdxnXE57v"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={false}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

export const PlasmicTraining = Object.assign(
  // Top-level PlasmicTraining renders the root element
  withPlasmicPageGuard(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    pageLayout: makeNodeComponent("pageLayout"),
    section: makeNodeComponent("section"),
    freeBox: makeNodeComponent("freeBox"),
    h1: makeNodeComponent("h1"),
    form: makeNodeComponent("form"),
    select: makeNodeComponent("select"),
    input5: makeNodeComponent("input5"),
    input6: makeNodeComponent("input6"),
    upload: makeNodeComponent("upload"),
    // Metadata about props expected for PlasmicTraining
    internalVariantProps: PlasmicTraining__VariantProps,
    internalArgProps: PlasmicTraining__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "training",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicTraining;
/* prettier-ignore-end */
