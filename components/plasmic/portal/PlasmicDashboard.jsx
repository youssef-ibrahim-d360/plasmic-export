// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: axW1Q7tQMGoC9jdxnXE57v
// Component: AB6LAsVSWz7T
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import {
  PlasmicPageGuard as PlasmicPageGuard__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  initializeCodeComponentStates,
  set as $stateSet,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import Wrapper from "../../Wrapper"; // plasmic-import: 2ZwK7zhhqua_/component
import { RichTable } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { tableHelpers as RichTable_Helpers } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: axW1Q7tQMGoC9jdxnXE57v/projectcss
import sty from "./PlasmicDashboard.module.css"; // plasmic-import: AB6LAsVSWz7T/css

createPlasmicElementProxy;

export const PlasmicDashboard__VariantProps = new Array();

export const PlasmicDashboard__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDashboard__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  let [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "wrapper.current",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "table.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "table.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "table.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "table.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("selectedRowKeys", RichTable_Helpers)
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const new$Queries = {
    unitsSoldByDateRange: usePlasmicDataOp(() => {
      return {
        sourceId: "3KEa87zbjNNsSt9zjDzDUy",
        opId: "dd9715ea-1089-4f09-ab98-4484dcdcf115",
        userArgs: {
          query: [$state.start.value, $state.end.value]
        },
        cacheKey: `plasmic.$.dd9715ea-1089-4f09-ab98-4484dcdcf115.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    listAllProductNames: usePlasmicDataOp(() => {
      return {
        sourceId: "3KEa87zbjNNsSt9zjDzDUy",
        opId: "4bca8a05-7220-4fb8-9da8-35921caa459f",
        userArgs: {},
        cacheKey: `plasmic.$.4bca8a05-7220-4fb8-9da8-35921caa459f.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "3KEa87zbjNNsSt9zjDzDUy",
        opId: "0b0264fa-73e2-4941-9b5a-f15efb01a311",
        userArgs: {},
        cacheKey: `plasmic.$.0b0264fa-73e2-4941-9b5a-f15efb01a311.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    query2: usePlasmicDataOp(() => {
      return {
        sourceId: "kg27Khthh5W85SBD6wGA9T",
        opId: "f7a85220-689a-4855-bb8e-ffd3b97d023c",
        userArgs: {},
        cacheKey: `plasmic.$.f7a85220-689a-4855-bb8e-ffd3b97d023c.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    query3: usePlasmicDataOp(() => {
      return {
        sourceId: "3KEa87zbjNNsSt9zjDzDUy",
        opId: "df328f45-6d10-4687-aa21-dca0fa0999c9",
        userArgs: {},
        cacheKey: `plasmic.$.df328f45-6d10-4687-aa21-dca0fa0999c9.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    directuscompanies: usePlasmicDataOp(() => {
      return {
        sourceId: "4ZYYADAQoesjszGqnyuasC",
        opId: "db83e9bd-e626-4b8f-8c13-485481b2a093",
        userArgs: {},
        cacheKey: `plasmic.$.db83e9bd-e626-4b8f-8c13-485481b2a093.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicDashboard.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicDashboard.pageMetadata.title}
        />

        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicDashboard.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <Wrapper
            data-plasmic-name={"wrapper"}
            data-plasmic-override={overrides.wrapper}
            className={classNames("__wab_instance", sty.wrapper)}
            current={generateStateValueProp($state, ["wrapper", "current"])}
            onCurrentChange={generateStateOnChangeProp($state, [
              "wrapper",
              "current"
            ])}
          />

          <section className={classNames(projectcss.all, sty.section__wgw2K)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__sdDhU
              )}
            >
              {"Welcome to the Portal !"}
            </div>
            <section className={classNames(projectcss.all, sty.section__hBfuv)}>
              <div
                data-plasmic-name={"freeBox"}
                data-plasmic-override={overrides.freeBox}
                className={classNames(projectcss.all, sty.freeBox)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__nxS4D
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {"Businesses"}
                    </span>
                  </React.Fragment>
                </div>
                {(() => {
                  const child$Props = {
                    canSelectRows: "click",
                    className: classNames("__wab_instance", sty.table),
                    data: (() => {
                      try {
                        return $queries.directuscompanies.data.response.data.map(
                          obj => {
                            const newObj = {};
                            for (const key in obj) {
                              const newKey = key
                                .replace(/_/g, " ")
                                .replace(/^\w/, c => c.toUpperCase());
                              newObj[newKey] = obj[key];
                            }
                            return newObj;
                          }
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })(),
                    fields: (() => {
                      const __composite = [
                        {
                          key: "__airtable_id",
                          fieldId: "__airtable_id",
                          isHidden: null
                        },
                        { key: "Company name", fieldId: "Company name" },
                        { key: "Owner", fieldId: "Owner" },
                        { key: "email", fieldId: "email" },
                        { key: "Status", fieldId: "Status" },
                        { key: "Email", fieldId: "Email" },
                        { key: "Business name", fieldId: "Business name" },
                        { key: "Date created", fieldId: "Date created" },
                        {
                          key: "User updated",
                          fieldId: "User updated",
                          isHidden: null
                        },
                        { key: "Team", fieldId: "Team", isHidden: null }
                      ];

                      __composite["0"]["isHidden"] = true;
                      __composite["8"]["isHidden"] = true;
                      __composite["9"]["isHidden"] = true;
                      return __composite;
                    })(),
                    onRowClick: async (rowKey, row, event) => {
                      const $steps = {};
                      $steps["updateTableSelectedRowKey"] = true
                        ? (() => {
                            const actionArgs = {
                              operation: 0,
                              variable: {
                                objRoot: $state,
                                variablePath: ["table", "selectedRowKey"]
                              }
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;
                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateTableSelectedRowKey"] != null &&
                        typeof $steps["updateTableSelectedRowKey"] ===
                          "object" &&
                        typeof $steps["updateTableSelectedRowKey"].then ===
                          "function"
                      ) {
                        $steps["updateTableSelectedRowKey"] = await $steps[
                          "updateTableSelectedRowKey"
                        ];
                      }
                      $steps["goToLaw25"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: `/law25/${(() => {
                                try {
                                  return $state.table.selectedRow[
                                    "Business name"
                                  ];
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}`
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToLaw25"] != null &&
                        typeof $steps["goToLaw25"] === "object" &&
                        typeof $steps["goToLaw25"].then === "function"
                      ) {
                        $steps["goToLaw25"] = await $steps["goToLaw25"];
                      }
                    },
                    onRowSelectionChanged: async (...eventArgs) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "selectedRowKey",
                        ["table", "selectedRowKey"],
                        RichTable_Helpers
                      ).apply(null, eventArgs);
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "selectedRow",
                        ["table", "selectedRow"],
                        RichTable_Helpers
                      ).apply(null, eventArgs);
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "selectedRows",
                        ["table", "selectedRows"],
                        RichTable_Helpers
                      ).apply(null, eventArgs);
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "selectedRowKeys",
                        ["table", "selectedRowKeys"],
                        RichTable_Helpers
                      ).apply(null, eventArgs);
                    },
                    scopeClassName: sty["table__instance"],
                    selectedRowKey: generateStateValueProp($state, [
                      "table",
                      "selectedRowKey"
                    ]),
                    selectedRowKeys: generateStateValueProp($state, [
                      "table",
                      "selectedRowKeys"
                    ]),
                    themeResetClassName: classNames(
                      projectcss.root_reset,
                      projectcss.root_reset_tags,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens,
                      plasmic_plasmic_rich_components_css.plasmic_tokens
                    )
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "selectedRowKey",
                        plasmicStateName: "table.selectedRowKey"
                      },
                      {
                        name: "selectedRow",
                        plasmicStateName: "table.selectedRow"
                      },
                      {
                        name: "selectedRows",
                        plasmicStateName: "table.selectedRows"
                      },
                      {
                        name: "selectedRowKeys",
                        plasmicStateName: "table.selectedRowKeys"
                      }
                    ],

                    [],
                    RichTable_Helpers ?? {},
                    child$Props
                  );
                  return (
                    <RichTable
                      data-plasmic-name={"table"}
                      data-plasmic-override={overrides.table}
                      {...child$Props}
                    />
                  );
                })()}
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__oMaGs
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $state.wrapper.current;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
            </section>
          </section>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "wrapper", "freeBox", "table"],
  wrapper: ["wrapper"],
  freeBox: ["freeBox", "table"],
  table: ["table"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDashboard__ArgProps,
          internalVariantPropNames: PlasmicDashboard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDashboard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDashboard";
  } else {
    func.displayName = `PlasmicDashboard.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard(WrappedComponent) {
  const PageGuard = props => (
    <PlasmicPageGuard__
      minRole={null}
      appId={"axW1Q7tQMGoC9jdxnXE57v"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={false}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

export const PlasmicDashboard = Object.assign(
  // Top-level PlasmicDashboard renders the root element
  withPlasmicPageGuard(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    wrapper: makeNodeComponent("wrapper"),
    freeBox: makeNodeComponent("freeBox"),
    table: makeNodeComponent("table"),
    // Metadata about props expected for PlasmicDashboard
    internalVariantProps: PlasmicDashboard__VariantProps,
    internalArgProps: PlasmicDashboard__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "dashboard",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicDashboard;
/* prettier-ignore-end */
