// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: axW1Q7tQMGoC9jdxnXE57v
// Component: keNHaUDVA72y
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import {
  PlasmicPageGuard as PlasmicPageGuard__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  initializeCodeComponentStates,
  initializePlasmicStates,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv
} from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";
import Wrapper from "../../Wrapper"; // plasmic-import: 2ZwK7zhhqua_/component
import PageLayout from "../../PageLayout"; // plasmic-import: CZ9Ckf2FOzzF/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { ConditionGuard } from "@plasmicpkgs/plasmic-basic-components";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdRadioGroup } from "@plasmicpkgs/antd5/skinny/registerRadio";
import { AntdRadio } from "@plasmicpkgs/antd5/skinny/registerRadio";
import { AntdDatePicker } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import { datePickerHelpers as AntdDatePicker_Helpers } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { useScreenVariants as useScreenVariantsk21KBn6Vb9Ed } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: K21kBN6Vb9ed/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: axW1Q7tQMGoC9jdxnXE57v/projectcss
import sty from "./PlasmicLaw25.module.css"; // plasmic-import: keNHaUDVA72y/css

createPlasmicElementProxy;

export const PlasmicLaw25__VariantProps = new Array();

export const PlasmicLaw25__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLaw25__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  let [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "wrapper.current",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,
        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "input2[].value",
        type: "private",
        variableType: "text",
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input4[].value",
        type: "private",
        variableType: "text",
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "radioGroup[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "dateTimePicker[].value",
        type: "private",
        variableType: "text",
        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "select[].value",
        type: "private",
        variableType: "text"
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();
  const new$Queries = {
    directusSnapshot: usePlasmicDataOp(() => {
      return {
        sourceId: "4ZYYADAQoesjszGqnyuasC",
        opId: "76e49c8b-299a-4612-ab6c-0c908ec4f3bb",
        userArgs: {},
        cacheKey: `plasmic.$.76e49c8b-299a-4612-ab6c-0c908ec4f3bb.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getBusinessData: usePlasmicDataOp(() => {
      return {
        sourceId: "4ZYYADAQoesjszGqnyuasC",
        opId: "f7b1b000-7a0f-459f-84ef-d26e137ba33f",
        userArgs: {
          path: [$ctx.params.business_name]
        },
        cacheKey: `plasmic.$.f7b1b000-7a0f-459f-84ef-d26e137ba33f.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsk21KBn6Vb9Ed()
  });
  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicLaw25.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicLaw25.pageMetadata.title}
        />

        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicLaw25.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <Wrapper
            data-plasmic-name={"wrapper"}
            data-plasmic-override={overrides.wrapper}
            className={classNames("__wab_instance", sty.wrapper)}
            current={generateStateValueProp($state, ["wrapper", "current"])}
            onCurrentChange={generateStateOnChangeProp($state, [
              "wrapper",
              "current"
            ])}
          />

          <PageLayout
            data-plasmic-name={"pageLayout"}
            data-plasmic-override={overrides.pageLayout}
            className={classNames("__wab_instance", sty.pageLayout)}
          >
            <DataCtxReader__>
              {$ctx => (
                <React.Fragment>
                  <section
                    data-plasmic-name={"section"}
                    data-plasmic-override={overrides.section}
                    className={classNames(projectcss.all, sty.section)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"freeBox"}
                      data-plasmic-override={overrides.freeBox}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox)}
                    />
                  </section>
                  <h1
                    data-plasmic-name={"h1"}
                    data-plasmic-override={overrides.h1}
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1
                    )}
                  >
                    {"Law 25 "}
                  </h1>
                  {(() => {
                    const child$Props = {
                      className: classNames("__wab_instance", sty.form),
                      extendedOnValuesChange:
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["form", "value"],
                          FormWrapper_Helpers
                        ),
                      formItems: [
                        { label: "Name", name: "name", inputType: "Text" },
                        {
                          label: "Message",
                          name: "message",
                          inputType: "Text Area"
                        }
                      ],

                      initialValues: (() => {
                        try {
                          return $queries.getBusinessData.data.response.data.find(
                            item =>
                              item.business_name === $ctx.params.business_name
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })(),
                      labelCol: { span: 8, horizontalOnly: true },
                      layout: "vertical",
                      mode: "advanced",
                      onFinish: async values => {
                        const $steps = {};
                        $steps["updateItem"] = true
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "4ZYYADAQoesjszGqnyuasC",
                                  opId: "41b6199a-5fa7-4a55-a49d-5b251842cf5c",
                                  userArgs: {
                                    body: [$state.form.value],
                                    path: [$state.form.value.id]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: ["plasmic_refresh_all"],
                                  roleId: null
                                },
                                continueOnError: true
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateItem"] != null &&
                          typeof $steps["updateItem"] === "object" &&
                          typeof $steps["updateItem"].then === "function"
                        ) {
                          $steps["updateItem"] = await $steps["updateItem"];
                        }
                        $steps["createItem"] =
                          !$state.form.value.hasOwnProperty("id")
                            ? (() => {
                                const actionArgs = {
                                  dataOp: {
                                    sourceId: "4ZYYADAQoesjszGqnyuasC",
                                    opId: "ad0a79e0-54cd-4bca-a59d-d51ffcaeb18c",
                                    userArgs: {
                                      body: [
                                        {
                                          ...$state.form.value,
                                          business_name:
                                            $ctx.params.business_name
                                        }
                                      ]
                                    },
                                    cacheKey: null,
                                    invalidatedKeys: ["plasmic_refresh_all"],
                                    roleId: null
                                  }
                                };
                                return (async ({ dataOp, continueOnError }) => {
                                  try {
                                    const response = await executePlasmicDataOp(
                                      dataOp,
                                      {
                                        userAuthToken:
                                          dataSourcesCtx?.userAuthToken,
                                        user: dataSourcesCtx?.user
                                      }
                                    );
                                    await plasmicInvalidate(
                                      dataOp.invalidatedKeys
                                    );
                                    return response;
                                  } catch (e) {
                                    if (!continueOnError) {
                                      throw e;
                                    }
                                    return e;
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["createItem"] != null &&
                          typeof $steps["createItem"] === "object" &&
                          typeof $steps["createItem"].then === "function"
                        ) {
                          $steps["createItem"] = await $steps["createItem"];
                        }
                      },
                      onIsSubmittingChange:
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "isSubmitting",
                          ["form", "isSubmitting"],
                          FormWrapper_Helpers
                        ),
                      ref: ref => {
                        $refs["form"] = ref;
                      },
                      submitSlot: null,
                      wrapperCol: { span: 16, horizontalOnly: true }
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "form.value"
                        },
                        {
                          name: "isSubmitting",
                          plasmicStateName: "form.isSubmitting"
                        }
                      ],

                      [],
                      FormWrapper_Helpers ?? {},
                      child$Props
                    );
                    return (
                      <FormWrapper
                        data-plasmic-name={"form"}
                        data-plasmic-override={overrides.form}
                        {...child$Props}
                      >
                        {(_par =>
                          !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                          (() => {
                            try {
                              return $queries.directusSnapshot.data.response.data.fields.filter(
                                field =>
                                  field.collection === "Law25" &&
                                  field.type === "integer" &&
                                  field.meta.hidden === false
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        ).map((__plasmic_item_0, __plasmic_idx_0) => {
                          const currentItem = __plasmic_item_0;
                          const currentIndex = __plasmic_idx_0;
                          return (
                            <ConditionGuard
                              className={classNames(
                                "__wab_instance",
                                sty.conditionGuard__ts3T
                              )}
                              condition={(() => {
                                try {
                                  return currentItem.type === "integer";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })()}
                              key={currentIndex}
                            >
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField___5DQoe
                                )}
                                label={
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.field
                                          .replace(/_/g, " ")
                                          .replace(/\b\w/g, firstLetter =>
                                            firstLetter.toUpperCase()
                                          );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Name";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                }
                                name={(() => {
                                  try {
                                    return currentItem.field;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              >
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.input4
                                    ),
                                    onChange:
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "value",
                                        ["input4", __plasmic_idx_0, "value"],
                                        AntdInput_Helpers
                                      ),
                                    type: "number",
                                    value: generateStateValueProp($state, [
                                      "input4",
                                      __plasmic_idx_0,
                                      "value"
                                    ])
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "value",
                                        plasmicStateName: "input4[].value"
                                      }
                                    ],

                                    [__plasmic_idx_0],
                                    AntdInput_Helpers ?? {},
                                    child$Props
                                  );
                                  initializePlasmicStates(
                                    $state,
                                    [
                                      {
                                        name: "input4[].value",
                                        initFunc: ({
                                          $props,
                                          $state,
                                          $queries
                                        }) => undefined
                                      }
                                    ],

                                    [__plasmic_idx_0]
                                  );
                                  return (
                                    <AntdInput
                                      data-plasmic-name={"input4"}
                                      data-plasmic-override={overrides.input4}
                                      {...child$Props}
                                    />
                                  );
                                })()}
                              </FormItemWrapper>
                            </ConditionGuard>
                          );
                        })}
                        {(_par =>
                          !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                          (() => {
                            try {
                              return $queries.directusSnapshot.data.response.data.fields.filter(
                                field =>
                                  field.collection === "Law25" &&
                                  field.type === "string" &&
                                  field.meta.hidden === false &&
                                  field.meta.interface === "input"
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        ).map((__plasmic_item_0, __plasmic_idx_0) => {
                          const currentItem = __plasmic_item_0;
                          const currentIndex = __plasmic_idx_0;
                          return (
                            <ConditionGuard
                              className={classNames(
                                "__wab_instance",
                                sty.conditionGuard__o79Q
                              )}
                              condition={(() => {
                                try {
                                  return currentItem.meta.interface === "input";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })()}
                              key={currentIndex}
                            >
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField__uW4Sz
                                )}
                                label={
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.field
                                          .replace(/_/g, " ")
                                          .replace(/\b\w/g, firstLetter =>
                                            firstLetter.toUpperCase()
                                          );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Name";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                }
                                name={(() => {
                                  try {
                                    return currentItem.field;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              >
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.input2
                                    ),
                                    onChange:
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "value",
                                        ["input2", __plasmic_idx_0, "value"],
                                        AntdInput_Helpers
                                      ),
                                    type: "text",
                                    value: generateStateValueProp($state, [
                                      "input2",
                                      __plasmic_idx_0,
                                      "value"
                                    ])
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "value",
                                        plasmicStateName: "input2[].value"
                                      }
                                    ],

                                    [__plasmic_idx_0],
                                    AntdInput_Helpers ?? {},
                                    child$Props
                                  );
                                  initializePlasmicStates(
                                    $state,
                                    [
                                      {
                                        name: "input2[].value",
                                        initFunc: ({
                                          $props,
                                          $state,
                                          $queries
                                        }) => undefined
                                      }
                                    ],

                                    [__plasmic_idx_0]
                                  );
                                  return (
                                    <AntdInput
                                      data-plasmic-name={"input2"}
                                      data-plasmic-override={overrides.input2}
                                      {...child$Props}
                                    />
                                  );
                                })()}
                              </FormItemWrapper>
                            </ConditionGuard>
                          );
                        })}
                        {(_par =>
                          !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                          (() => {
                            try {
                              return $queries.directusSnapshot.data.response.data.fields.filter(
                                field =>
                                  field.collection === "Law25" &&
                                  !field.meta.hidden &&
                                  field.meta.interface === "select-radio"
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        ).map((__plasmic_item_0, __plasmic_idx_0) => {
                          const currentItem = __plasmic_item_0;
                          const currentIndex = __plasmic_idx_0;
                          return (
                            <ConditionGuard
                              className={classNames(
                                "__wab_instance",
                                sty.conditionGuard__cHoZk
                              )}
                              condition={(() => {
                                try {
                                  return (
                                    currentItem.meta.interface ===
                                    "select-radio"
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })()}
                              key={currentIndex}
                            >
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField__k62Vv
                                )}
                                initialValue={``}
                                label={
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return (
                                          currentItem.field
                                            .replace(/_/g, " ")
                                            .charAt(0)
                                            .toUpperCase() +
                                          currentItem.field
                                            .replace(/_/g, " ")
                                            .slice(1)
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Name";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                }
                                name={(() => {
                                  try {
                                    return currentItem.field;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              >
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.radioGroup
                                    ),
                                    onChange: generateStateOnChangeProp(
                                      $state,
                                      ["radioGroup", __plasmic_idx_0, "value"]
                                    ),
                                    options: (() => {
                                      try {
                                        return currentItem.meta.options.choices.map(
                                          choice => choice.value
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [
                                            {
                                              value: "option1",
                                              label: "Option 1"
                                            },
                                            {
                                              value: "option2",
                                              label: "Option 2"
                                            }
                                          ];
                                        }
                                        throw e;
                                      }
                                    })(),
                                    value: generateStateValueProp($state, [
                                      "radioGroup",
                                      __plasmic_idx_0,
                                      "value"
                                    ])
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "value",
                                        plasmicStateName: "radioGroup[].value"
                                      }
                                    ],

                                    [__plasmic_idx_0],
                                    undefined ?? {},
                                    child$Props
                                  );
                                  initializePlasmicStates(
                                    $state,
                                    [
                                      {
                                        name: "radioGroup[].value",
                                        initFunc: ({
                                          $props,
                                          $state,
                                          $queries
                                        }) => undefined
                                      }
                                    ],

                                    [__plasmic_idx_0]
                                  );
                                  return (
                                    <AntdRadioGroup
                                      data-plasmic-name={"radioGroup"}
                                      data-plasmic-override={
                                        overrides.radioGroup
                                      }
                                      {...child$Props}
                                    >
                                      <AntdRadio
                                        className={classNames(
                                          "__wab_instance",
                                          sty.radio__dSrtM
                                        )}
                                        value={"op1"}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__h3Yof
                                          )}
                                        >
                                          {"Option 1"}
                                        </div>
                                      </AntdRadio>
                                      <AntdRadio
                                        className={classNames(
                                          "__wab_instance",
                                          sty.radio__boPhh
                                        )}
                                        value={"op2"}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__ry9P
                                          )}
                                        >
                                          {"Option 2"}
                                        </div>
                                      </AntdRadio>
                                    </AntdRadioGroup>
                                  );
                                })()}
                              </FormItemWrapper>
                            </ConditionGuard>
                          );
                        })}
                        {(_par =>
                          !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                          (() => {
                            try {
                              return $queries.directusSnapshot.data.response.data.fields.filter(
                                field =>
                                  field.collection === "Law25" &&
                                  !field.meta.hidden &&
                                  field.type === "dateTime"
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        ).map((__plasmic_item_0, __plasmic_idx_0) => {
                          const currentItem = __plasmic_item_0;
                          const currentIndex = __plasmic_idx_0;
                          return (
                            <ConditionGuard
                              className={classNames(
                                "__wab_instance",
                                sty.conditionGuard__jDiiE
                              )}
                              condition={(() => {
                                try {
                                  return (
                                    currentItem.meta.interface === "datetime"
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })()}
                              key={currentIndex}
                            >
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField__hrzgN
                                )}
                                initialValue={(() => {
                                  try {
                                    return undefined;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                                label={
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return (
                                          currentItem.field
                                            .replace(/_/g, " ")
                                            .charAt(0)
                                            .toUpperCase() +
                                          currentItem.field
                                            .replace(/_/g, " ")
                                            .slice(1)
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Name";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                }
                                name={(() => {
                                  try {
                                    return currentItem.field;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              >
                                {(() => {
                                  const child$Props = {
                                    allowClear: true,
                                    autoFocus: true,
                                    className: classNames(
                                      "__wab_instance",
                                      sty.dateTimePicker
                                    ),
                                    onChange:
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "value",
                                        [
                                          "dateTimePicker",
                                          __plasmic_idx_0,
                                          "value"
                                        ],

                                        AntdDatePicker_Helpers
                                      ),
                                    popupScopeClassName:
                                      sty["dateTimePicker__datePickerPopup"],
                                    showTime: true,
                                    value: generateStateValueProp($state, [
                                      "dateTimePicker",
                                      __plasmic_idx_0,
                                      "value"
                                    ])
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "value",
                                        plasmicStateName:
                                          "dateTimePicker[].value"
                                      }
                                    ],

                                    [__plasmic_idx_0],
                                    AntdDatePicker_Helpers ?? {},
                                    child$Props
                                  );
                                  initializePlasmicStates(
                                    $state,
                                    [
                                      {
                                        name: "dateTimePicker[].value",
                                        initFunc: ({
                                          $props,
                                          $state,
                                          $queries
                                        }) => undefined
                                      }
                                    ],

                                    [__plasmic_idx_0]
                                  );
                                  return (
                                    <AntdDatePicker
                                      data-plasmic-name={"dateTimePicker"}
                                      data-plasmic-override={
                                        overrides.dateTimePicker
                                      }
                                      {...child$Props}
                                    />
                                  );
                                })()}
                              </FormItemWrapper>
                            </ConditionGuard>
                          );
                        })}
                        {(_par =>
                          !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                          (() => {
                            try {
                              return $queries.directusSnapshot.data.response.data.fields.filter(
                                field =>
                                  field.collection === "Law25" &&
                                  !field.meta.hidden
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        ).map((__plasmic_item_0, __plasmic_idx_0) => {
                          const currentItem = __plasmic_item_0;
                          const currentIndex = __plasmic_idx_0;
                          return (
                            <ConditionGuard
                              className={classNames(
                                "__wab_instance",
                                sty.conditionGuard__fSpP1
                              )}
                              condition={(() => {
                                try {
                                  return (
                                    currentItem.meta.interface ===
                                    "select-dropdown"
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })()}
                              key={currentIndex}
                            >
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField__fOdj0
                                )}
                                label={
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.field
                                          .replace(/_/g, " ")
                                          .replace(/\b\w/g, firstLetter =>
                                            firstLetter.toUpperCase()
                                          );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Name";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                }
                                name={(() => {
                                  try {
                                    return currentItem.field;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              >
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.select
                                    ),
                                    defaultStylesClassName: classNames(
                                      projectcss.root_reset,
                                      projectcss.plasmic_default_styles,
                                      projectcss.plasmic_mixins,
                                      projectcss.plasmic_tokens,
                                      plasmic_antd_5_hostless_css.plasmic_tokens,
                                      plasmic_plasmic_rich_components_css.plasmic_tokens
                                    ),
                                    onChange: generateStateOnChangeProp(
                                      $state,
                                      ["select", __plasmic_idx_0, "value"]
                                    ),
                                    options: (() => {
                                      try {
                                        return currentItem.meta.options.choices;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [
                                            {
                                              value: "option1",
                                              label: "Option 1",
                                              type: "option"
                                            },
                                            {
                                              value: "option2",
                                              label: "Option 2",
                                              type: "option"
                                            }
                                          ];
                                        }
                                        throw e;
                                      }
                                    })(),
                                    placeholder: "Select...",
                                    popupScopeClassName: sty["select__popup"],
                                    value: generateStateValueProp($state, [
                                      "select",
                                      __plasmic_idx_0,
                                      "value"
                                    ])
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "value",
                                        plasmicStateName: "select[].value"
                                      }
                                    ],

                                    [__plasmic_idx_0],
                                    undefined ?? {},
                                    child$Props
                                  );
                                  initializePlasmicStates(
                                    $state,
                                    [
                                      {
                                        name: "select[].value",
                                        initFunc: ({
                                          $props,
                                          $state,
                                          $queries
                                        }) => undefined
                                      }
                                    ],

                                    [__plasmic_idx_0]
                                  );
                                  return (
                                    <AntdSelect
                                      data-plasmic-name={"select"}
                                      data-plasmic-override={overrides.select}
                                      {...child$Props}
                                    />
                                  );
                                })()}
                              </FormItemWrapper>
                            </ConditionGuard>
                          );
                        })}
                        <AntdButton
                          data-plasmic-name={"button"}
                          data-plasmic-override={overrides.button}
                          className={classNames("__wab_instance", sty.button)}
                          onClick={async () => {
                            const $steps = {};
                            $steps["runActionOnForm"] = true
                              ? (() => {
                                  const actionArgs = { tplRef: "form" };
                                  return (({ tplRef, action, args }) => {
                                    return $refs?.[tplRef]?.[action]?.(
                                      ...(args ?? [])
                                    );
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runActionOnForm"] != null &&
                              typeof $steps["runActionOnForm"] === "object" &&
                              typeof $steps["runActionOnForm"].then ===
                                "function"
                            ) {
                              $steps["runActionOnForm"] = await $steps[
                                "runActionOnForm"
                              ];
                            }
                          }}
                          submitsForm={true}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__pY7L
                            )}
                          >
                            {"Submit"}
                          </div>
                        </AntdButton>
                      </FormWrapper>
                    );
                  })()}
                </React.Fragment>
              )}
            </DataCtxReader__>
          </PageLayout>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "wrapper",
    "pageLayout",
    "section",
    "freeBox",
    "h1",
    "form",
    "input4",
    "input2",
    "radioGroup",
    "dateTimePicker",
    "select",
    "button"
  ],

  wrapper: ["wrapper"],
  pageLayout: [
    "pageLayout",
    "section",
    "freeBox",
    "h1",
    "form",
    "input4",
    "input2",
    "radioGroup",
    "dateTimePicker",
    "select",
    "button"
  ],

  section: ["section", "freeBox"],
  freeBox: ["freeBox"],
  h1: ["h1"],
  form: [
    "form",
    "input4",
    "input2",
    "radioGroup",
    "dateTimePicker",
    "select",
    "button"
  ],

  input4: ["input4"],
  input2: ["input2"],
  radioGroup: ["radioGroup"],
  dateTimePicker: ["dateTimePicker"],
  select: ["select"],
  button: ["button"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLaw25__ArgProps,
          internalVariantPropNames: PlasmicLaw25__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLaw25__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLaw25";
  } else {
    func.displayName = `PlasmicLaw25.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard(WrappedComponent) {
  const PageGuard = props => (
    <PlasmicPageGuard__
      minRole={"faa83d0b-9e40-4f02-9ea2-ee2e22fab2ff"}
      appId={"axW1Q7tQMGoC9jdxnXE57v"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={false}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

export const PlasmicLaw25 = Object.assign(
  // Top-level PlasmicLaw25 renders the root element
  withPlasmicPageGuard(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    wrapper: makeNodeComponent("wrapper"),
    pageLayout: makeNodeComponent("pageLayout"),
    section: makeNodeComponent("section"),
    freeBox: makeNodeComponent("freeBox"),
    h1: makeNodeComponent("h1"),
    form: makeNodeComponent("form"),
    input4: makeNodeComponent("input4"),
    input2: makeNodeComponent("input2"),
    radioGroup: makeNodeComponent("radioGroup"),
    dateTimePicker: makeNodeComponent("dateTimePicker"),
    select: makeNodeComponent("select"),
    button: makeNodeComponent("button"),
    // Metadata about props expected for PlasmicLaw25
    internalVariantProps: PlasmicLaw25__VariantProps,
    internalArgProps: PlasmicLaw25__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "law25",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicLaw25;
/* prettier-ignore-end */
