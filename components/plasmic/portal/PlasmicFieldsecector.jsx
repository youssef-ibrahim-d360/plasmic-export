// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: axW1Q7tQMGoC9jdxnXE57v
// Component: 6AC0km4Toz-Z
import * as React from "react";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  initializeCodeComponentStates,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { ConditionGuard } from "@plasmicpkgs/plasmic-basic-components";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: axW1Q7tQMGoC9jdxnXE57v/projectcss
import sty from "./PlasmicFieldsecector.module.css"; // plasmic-import: 6AC0km4Toz-Z/css

createPlasmicElementProxy;

export const PlasmicFieldsecector__VariantProps = new Array();

export const PlasmicFieldsecector__ArgProps = new Array("testInput");

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFieldsecector__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          testInput: "Image"
        },
        props.args
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "kmkmkm.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <section
        data-plasmic-name={"section"}
        data-plasmic-override={overrides.section}
        className={classNames(projectcss.all, sty.section)}
      >
        {(() => {
          try {
            return $props.testInput != "text";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <Reveal
            data-plasmic-name={"reveal"}
            data-plasmic-override={overrides.reveal}
            className={classNames("__wab_instance", sty.reveal)}
            triggerOnce={true}
          >
            {(() => {
              const child$Props = {
                className: classNames("__wab_instance", sty.kmkmkm),
                disabled: false,
                onChange: generateStateOnChangePropForCodeComponents(
                  $state,
                  "value",
                  ["kmkmkm", "value"],
                  AntdInput_Helpers
                ),
                readOnly: (() => {
                  try {
                    return $props.testInput != "text";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })(),
                size: (() => {
                  try {
                    return undefined;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "small";
                    }
                    throw e;
                  }
                })(),
                value: generateStateValueProp($state, ["kmkmkm", "value"])
              };
              initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "value",
                    plasmicStateName: "kmkmkm.value"
                  }
                ],

                [],
                AntdInput_Helpers ?? {},
                child$Props
              );
              return (
                <AntdInput
                  data-plasmic-name={"kmkmkm"}
                  data-plasmic-override={overrides.kmkmkm}
                  {...child$Props}
                />
              );
            })()}
          </Reveal>
        ) : null}
        <PlasmicImg__
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img)}
          displayHeight={"auto"}
          displayMaxHeight={"none"}
          displayMaxWidth={"50px"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"100%"}
          loading={"lazy"}
          src={{
            src: "/plasmic/portal/images/screenShot20240408At22712PMpng.png",
            fullWidth: 598,
            fullHeight: 998,
            aspectRatio: undefined
          }}
        />

        <AntdSelect
          data-plasmic-name={"select"}
          data-plasmic-override={overrides.select}
          className={classNames("__wab_instance", sty.select)}
          defaultStylesClassName={classNames(
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens
          )}
          onChange={generateStateOnChangeProp($state, ["select", "value"])}
          options={[
            { value: "option1", label: "Option 1", type: "option" },
            { value: "option2", label: "Option 2", type: "option" }
          ]}
          placeholder={"Select..."}
          popupScopeClassName={sty["select__popup"]}
          value={generateStateValueProp($state, ["select", "value"])}
        />
      </section>
      <ConditionGuard
        data-plasmic-name={"conditionGuard"}
        data-plasmic-override={overrides.conditionGuard}
        className={classNames("__wab_instance", sty.conditionGuard)}
        condition={true}
      />
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "section",
    "reveal",
    "kmkmkm",
    "img",
    "select",
    "conditionGuard"
  ],

  section: ["section", "reveal", "kmkmkm", "img", "select"],
  reveal: ["reveal", "kmkmkm"],
  kmkmkm: ["kmkmkm"],
  img: ["img"],
  select: ["select"],
  conditionGuard: ["conditionGuard"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFieldsecector__ArgProps,
          internalVariantPropNames: PlasmicFieldsecector__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFieldsecector__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFieldsecector";
  } else {
    func.displayName = `PlasmicFieldsecector.${nodeName}`;
  }
  return func;
}

export const PlasmicFieldsecector = Object.assign(
  // Top-level PlasmicFieldsecector renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    reveal: makeNodeComponent("reveal"),
    kmkmkm: makeNodeComponent("kmkmkm"),
    img: makeNodeComponent("img"),
    select: makeNodeComponent("select"),
    conditionGuard: makeNodeComponent("conditionGuard"),
    // Metadata about props expected for PlasmicFieldsecector
    internalVariantProps: PlasmicFieldsecector__VariantProps,
    internalArgProps: PlasmicFieldsecector__ArgProps
  }
);

export default PlasmicFieldsecector;
/* prettier-ignore-end */
